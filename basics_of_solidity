pragma solidity ^0.8.3;

contract HelloWorld {
    string public greet = "Hello World!";

    uint public num;

    function get() public view returns (uint) {
        return num;
    }

    function set(uint _num) public {
        num = _num;
    }

    function foo(uint x) public pure returns (uint) {
        if (x < 10) {
            return 0;
        } else if (x < 20) {
            return 1;
        } else {
            return 2;
        }
    }
    
    function ternary(uint _x) public pure returns (uint) {
        // if (_x < 10) {
        //     return 1;
        // }
        // return 2;

        // shorthand way to write if / else statement
        return _x < 10 ? 1 : 2;
    }

    mapping(address => uint)public myMap;

    function get(address _addr) public view returns (uint) {
        return myMap[_addr];
    }

    function set(address _addr, uint _i) public {
        myMap[_addr] = _i;
    }

    function remove(address _addr) public {
        delete myMap[_addr];
    }

    uint[] public arr;
    uint[] public arr2 = [1, 2, 3];
    uint[10] public myFixedSizeArr;

    function get(uint i) public view returns (uint) {
        return arr[i];
    }

    function push(uint i) public {
        arr.push(i);
    }

    function pop() public {
        arr.pop();
    }

    function remove(uint index) public {
        delete arr[index];
    }

    function getLength() public view returns (uint) {
        return arr.length;
    }

    function getArr() public view returns (uint[] memory) {
        return arr;
    }

    function removeCompact(uint index) public {
        // Move the last element into the place to delete
        arr[index] = arr[arr.length - 1];
        // Remove the last element
        arr.pop();
    }

    function returnMany() public pure returns (uint, bool, uint)
    {
        return (1, true, 2);
    }

    function named() public pure returns (uint x, bool b, uint y)
    {
        return (1, true, 2);
    }

    function assigned() public pure returns (uint x, bool b, uint y)
    {
        x = 1;
        b = true;
        y = 2;
    }

    function destructingAssigments() public pure returns (uint, bool, uint, uint, uint)
    {
        (uint i, bool b, uint j) = returnMany();

        // Values can be left out.
        (uint x, , uint y) = (4, 5, 6);

        return (i, b, j, x, y);
    }

}
